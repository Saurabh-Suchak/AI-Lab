import math

def print_board(board):
    # Prints the current state of the Tic-Tac-Toe board
    print("   0  1  2")
    for i in range(3):
        print("{}  {}  {}  {}".format(i, board[i][0], board[i][1], board[i][2]))

def evaluate(board):
    # Evaluates the current state of the Tic-Tac-Toe board
    # Returns +10 if the computer wins, -10 if the player wins, 0 for a draw, or None if the game is not over
    for row in board:
        if row.count(row[0]) == len(row) and row[0] != " ":
            return 10 if row[0] == "X" else -10

    for col in range(3):
        if board[0][col] == board[1][col] == board[2][col] and board[0][col] != " ":
            return 10 if board[0][col] == "X" else -10

    if board[0][0] == board[1][1] == board[2][2] and board[0][0] != " ":
        return 10 if board[0][0] == "X" else -10

    if board[0][2] == board[1][1] == board[2][0] and board[0][2] != " ":
        return 10 if board[0][2] == "X" else -10

    if any(" " in row for row in board):
        return None

    return 0

def minimax(board, depth, isMaximizingPlayer, alpha, beta):
    # Implements the Minimax algorithm with alpha-beta pruning
    # Returns the best score for the current player's move and the corresponding best move
    score = evaluate(board)

    if score is not None:
        return score, None

    if isMaximizingPlayer:
        best_score = -math.inf
        best_move = None
        for i in range(3):
            for j in range(3):
                if board[i][j] == " ":
                    board[i][j] = "X"
                    score, _ = minimax(board, depth + 1, False, alpha, beta)
                    board[i][j] = " "
                    if score > best_score:
                        best_score = score
                        best_move = (i, j)
                    alpha = max(alpha, best_score)
                    if beta <= alpha:
                        break
        return best_score, best_move

    else:
        best_score = math.inf
        best_move = None
        for i in range(3):
            for j in range(3):
                if board[i][j] == " ":
                    board[i][j] = "O"
                    score, _ = minimax(board, depth + 1, True, alpha, beta)
                    board[i][j] = " "
                    if score < best_score:
                        best_score = score
                        best_move = (i, j)
                    beta = min(beta, best_score)
                    if beta <= alpha:
                        break
        return best_score, best_move

def play_game():
    # Plays the Tic-Tac-Toe game with the computer using the Minimax algorithm with alpha-beta pruning
    board = [[" " for _ in range(3)] for _ in range(3)]
    current_player = "X"

    while True:
        print_board(board)

        if current_player == "X":
            print("Computer's turn (X):")
            score, move = minimax(board, 0, True, -math.inf, math.inf)
            board[move[0]][move[1]] = "X"
            current_player = "O"
        else:
            print("Player's turn (O):")
            while True:
                row = int(input("Enter row (0, 1, 2): "))
                col = int(input("Enter col (0, 1, 2): "))
                if board[row][col] == " ":
                    board[row][col] = "O"
                    current_player = "X"
                    break
                else:
                    print("Invalid move. Please try again.")

        winner = evaluate(board)
        if winner is not None:
            print_board(board)
            if winner == 10:
                print("Computer (X) wins!")
            elif winner == -10:
                print("Player (O) wins!")
            else:
                print("It's a draw!")
            break

play_game()

